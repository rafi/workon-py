#!/usr/bin/env bash
#
# workon-py - work on virtualenvs via subshell
# http://github.com/rafi/workon-py
#
# Copyright (C) 2015-2019 Rafael Bodill <justrafi at gmail>
# Distributed under the GNU General Public License, version 2.0.
set -eu

_workon_usage() {
	local __version=0.2.0
	echo "usage: $(basename "$0") [arguments] <virtualenv>"
	echo "version: ${__version}"
	echo
	echo 'arguments:'
	echo "  -c, --create           create and activate a new virtualenv"
	echo "  -d, --delete           Delete virtualenv"
	echo "  -h, --help             show this help message and exit"
	echo
	echo 'environment variables:'
	echo "  WORKON_HOME            Path to create venvs, default: \${XDG_DATA_HOME}/python/envs"
	echo "  WORKON_VIRTUALENV      Optional, set specific virtualenv path"
	echo "                         Leave empty for interactive selection."
}

# Create a new virtualenv in specific path, using 'virtualenv' from
# WORKON_VIRTUALENV environment variable or selected virtualenv, if found many.
_workon_create() {
	if [ -d "$VIRTUAL_ENV" ]; then
		echo "It appears this virtualenv already exists ($VIRTUAL_ENV), aborting."
		exit 2
	fi

	local virtualenv_cmd="${WORKON_VIRTUALENV:=}"
	if [ "$virtualenv_cmd" = "" ]; then
		local paths=( ${PATH//:/ } )
		declare -a cmds=()
		cmds+=("python3 -m venv")
		while IFS=  read -r -d $'\0'; do
				cmds+=("$REPLY")
		done < <(\
			find "${paths[@]}" -maxdepth 1 -name "virtualenv*" -print0 2>/dev/null)

		if [ ${#cmds[@]} -eq 0 ]; then
			echo 'Cannot find any virtualenv commands, aborting.'
			exit 3
		elif [ ${#cmds[@]} -eq 1 ]; then
			virtualenv_cmd="${cmds[0]}"
		else
			PS3='Select virtualenv program to use: '
			select virtualenv_cmd in "${cmds[@]}"; do
				[ -n "$virtualenv_cmd" ] && break;
			done
		fi
	fi

	if [ "${virtualenv_cmd}" = "python3 -m venv" ]; then
		python3 -m venv "${VIRTUAL_ENV}"
	else
		"${virtualenv_cmd}" "${VIRTUAL_ENV}"
	fi

	if [ "${__install}" = "1" ]; then
		echo
		"${VIRTUAL_ENV}"/bin/pip install -r requirements.txt
	fi
}

# Delete virtualenv
_workon_delete() {
	if [ ! -d "$VIRTUAL_ENV" ]; then
		echo " :: Virtual environment '$1' doesn't exist at $VIRTUAL_ENV"
		exit 2
	fi
	rm -rf "$VIRTUAL_ENV"
	echo " :: Virtual environment '$1' deleted $VIRTUAL_ENV"
}

# Execute a subshell with virtualenv variable prepended to PATH
_workon_activate() {
	if [ ! -d "$VIRTUAL_ENV" ]; then
		echo " :: Virtual environment '$1' doesn't exist at $VIRTUAL_ENV"
		exit 2
	fi
	echo " :: Activating \`$VIRTUAL_ENV\`"
	echo '    To deactivate, exit the shell (using "exit" or Ctrl-D).'

	export VIRTUAL_ENV
	export PATH="$VIRTUAL_ENV/bin:$PATH"
	unset PYTHONHOME
	exec "${SHELL}"
}

_workon_list() {
	find "$__workon_home" ! -path "$__workon_home" \
		-type d -maxdepth 1 -exec basename "{}" \;
}

_workon_get_name() {
	local cwd="$1" name='' hash=''
	name="$(basename "${cwd}")"

	if hash crc32 2>/dev/null; then
		hash=$(crc32 <(echo "${cwd}"))
		name="${name}-${hash}"
	fi
	echo "${name}"
}

_workon () {
	local envs="${WORKON_HOME:-${XDG_DATA_HOME:-$HOME/.local/share}/python/envs}"
	local __workon_home="${envs%/}/" __venv=''
	local __delete=0 __create=0 __install=1

	for (( i=1; i<=$#; i++ )); do
		case "${!i}" in
			-c|--create)  __create=1 ;;
			-d|--delete)  __delete=1 ;;
			--no-install) __install=0 ;;
			-h|--help)    _workon_usage; exit ;;
			-*)           echo "Warning, unrecognized option ${!i}" ;;
			*)            __venv="${!i}" ;;
		esac
	done

	if [ -n "${VIRTUAL_ENV+set}" ]; then
		echo ' :: Already inside a virtualenv, exit first'
		exit 1
	fi
	if [ ! -d "$__workon_home" ]; then
		echo " :: Virtualenvs directory doesn't exist, creating '$__workon_home'"
		mkdir -p "$__workon_home"
	fi

	if [ -z "${__venv}" ]; then
		# List all virtualenvs if one is not specified
		_workon_list
	else
		# Prepare the virtualenv's path and call a function matching command
		[ "$__venv" = "." ] && __venv="$(_workon_get_name "$PWD")"
		local VIRTUAL_ENV="${__workon_home}${__venv}"
		if [ "$__delete" = "1" ]; then
			_workon_delete "${__venv}"
		else
			[ "$__create" = "1" ] && _workon_create "${__venv}"
			_workon_activate "${__venv}"
		fi
	fi
	exit $?
}
_workon "$@"
